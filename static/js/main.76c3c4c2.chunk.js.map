{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","handleChange","e","console","log","target","id","value","useState","username","setUsername","password","setPassword","rePassword","setRePassword","className","onSubmit","preventDefault","alert","htmlFor","type","onChange","required","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76c3c4c2.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  function handleChange(e) {\n    console.log(e.target.id, e.target.value);    \n  }\n\n  function handleSubmit(e) {\n    e.preventDefault();\n    if (password !== rePassword) {\n      alert(\"Password not match\");\n    }\n    else {\n    alert(`You are registered successfully as ${username}.`);\n    }\n  }\n\n  const [username, setUsername] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [rePassword, setRePassword] = useState(\"\");\n\n  console.log(\"username\", username);\n  console.log(\"password\", password);\n  console.log(\"retype password\", rePassword);\n\n\n  return (\n  <div className=\"App\">\n    <h1>Membership Registration Form</h1>\n    <div id=\"registration-form\">\n      <form onSubmit={handleSubmit}>\n        <div className=\"username-input\">\n          <label htmlFor=\"username\">Username: </label>\n          <input type=\"text\" id=\"username\" \n          value={username} \n          onChange={(e) => setUsername(e.target.value)} \n          required=\"required\" />\n        </div>\n        <div className=\"email-input\">\n          <label htmlFor=\"email\">Email: </label>\n          <input type=\"email\" id=\"email\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"password-input\">\n          <label htmlFor=\"password\">Password: </label>\n            <input type=\"password\" id=\"password\" \n            value={password}\n            onChange={(e) => setPassword(e.target.value)} \n            required=\"required\"/>\n        </div>\n        <div className=\"retype-password\">\n          <label htmlFor=\"rePassword\">Retype Password: </label>\n            <input type=\"password\" id=\"rePassword\" \n            value={rePassword}\n            onChange={(e) => setRePassword(e.target.value)}\n            required=\"required\"/>\n        </div>\n        <div className=\"first-name-input\">\n          <label htmlFor=\"firstname\">First Name: </label>\n          <input type=\"text\" id=\"firstName\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"last-name-input\">\n          <label htmlFor=\"lastname\">Last Name: </label>\n          <input type=\"text\" id=\"lastName\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"dob-input\">\n          <label htmlFor=\"dob\">Birthday: </label>\n          <input type=\"date\" id=\"dob\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"phone-input\">\n          <label htmlFor=\"phone\">Phone Number: </label>\n          <input type=\"tel\" id=\"phone\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"address01-input\">\n          <label htmlFor=\"address01\">Address First Line: </label>\n          <input type=\"text\" id=\"address01\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"address02-input\">\n          <label htmlFor=\"address02\">Address Second Line: </label>\n          <input type=\"text\" id=\"address02\" \n          onChange={handleChange} />\n        </div>\n        <div className=\"city-input\">\n          <label htmlFor=\"city\">City/Town: </label>\n          <input type=\"text\" id=\"city\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <div className=\"postcode-input\">\n          <label htmlFor=\"postcode\">Postcode: </label>\n          <input type=\"text\" id=\"postcode\" \n          onChange={handleChange} \n          required=\"required\"/>\n        </div>\n        <button type=\"submit\">Register</button>\n      </form>\n    </div>\n  </div>\n  );\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}